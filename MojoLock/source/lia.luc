module lia #(
  TYPE = 0 : TYPE < 2 
)(
    input clk,  // clock
    input rst,  // reset
    input once,
    output done,
    input in0 [16],
    input in1 [16],    
    input s [16],
    input f [16],
    output out [16]
  ) {
  .clk(clk) {
    .rst(rst) {
      fsm state = {IDLE,MIX,FILTER,DONE};
      signed dff in0_reg [16];
      signed dff in1_reg [16];
      signed dff mix_reg [32];
      signed dff out_reg [32];
      divider divider;
      filter filter;
    }
  }
  always {
    done = 0;
    out = out_reg.q[15:0];
    
    divider.once = 0;
    divider.in0 = in0_reg.q;
    divider.in1 = in1_reg.q;
    divider.shift = f[11:8];
    
    filter.once = 0;
    filter.in = mix_reg.q;
    filter.a1 = f[3:0];
    filter.a2 = f[3:0];
    
    case (state.q) {
      state.IDLE:
        if (once) {
          case (TYPE) {
          0:
          in0_reg.d = in0 - s;
          in1_reg.d = in1;
          1:
          in0_reg.d = in0 - in1;
          in1_reg.d = in0 + in1 - s;
          }
          state.d = state.MIX;
        }
      state.MIX:
        case (TYPE) {
        0:
        mix_reg.d = in0_reg.q * in1_reg.q;
        state.d = state.FILTER;
        1:
        if (divider.done) {
          mix_reg.d = divider.out;
          state.d = state.FILTER;
        } else
            divider.once = 1;
        }
      state.FILTER:
        if (f[3:0] == 0) {
          out_reg.d = $signed($signed(mix_reg.q) >>> f[7:4]);
          state.d = state.DONE;
        } else {
          if (filter.done) {
            out_reg.d = $signed($signed(filter.out) >>> f[7:4]);
            state.d = state.DONE;
          } else
            filter.once = 1;
        }
      state.DONE:
        done = 1;
        state.d = state.IDLE;
    }
  }
}
