module rom #(
  BITS = 16 : BITS > 1,
  SIZE = 1024 : SIZE > 1
  )(
    input clk,  // clock
    input rst,  // reset
    input once,
    output done,
    input in [BITS],
    output out [BITS]
  ) {
  .clk(clk) {
    #SIZE(BITS), #DEPTH(SIZE) {
      simple_ram ram;
    }
    .rst(rst) {
      fsm state = {IDLE,RUN,WRITE,READ};
      dff addr [$clog2(SIZE)];
      dff size [$clog2(SIZE)];
      dff next;
    }
  }
  always {
    done = 0;
    out = ram.read_data;
    
    ram.address = addr.q;
    ram.write_en = 0;
    ram.write_data = 0;
    
    case (state.q) {
       state.IDLE:
        if (once)
          state.d = next.q ? state.WRITE : state.RUN;
      state.RUN:
        if (in[$clog2(SIZE)]) {
          if (|in[$clog2(SIZE)-1:0]) {
            addr.d = 0;
            size.d = in[$clog2(SIZE)-1:0];
            next.d = 1;
            done = 1;
            state.d = state.IDLE;
          } else {
            if (addr.q == size.q)
              addr.d = 0;
            else
              addr.d = addr.q + 1;
            state.d = state.READ;
          }
        } else {
          addr.d = in[$clog2(SIZE)-1:0];
          state.d = state.READ;
        }
      state.WRITE:
        ram.write_en = 1;
        ram.write_data = in;
        if (addr.q == size.q) {
          addr.d = 0;
          next.d = 0;
        } else
          addr.d = addr.q + 1;
        done = 1;
        state.d = state.IDLE;
      state.READ:
        done = 1;
        state.d = state.IDLE;
    }
  }
}
